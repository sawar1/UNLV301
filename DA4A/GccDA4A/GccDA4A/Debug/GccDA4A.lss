
GccDA4A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000021c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006c6  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000628  00000000  00000000  0000097a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a3  00000000  00000000  00000fa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001248  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034f  00000000  00000000  0000129c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  000015eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000164e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
volatile unsigned int adcVal;			// holds value of ADC
volatile unsigned int pressed;

int main(void){
	// port initialization
	DDRB = (1<<1)|(1<<2);	// PB.1-2 (OC1A & OC1B) as output to generate PWM
  90:	86 e0       	ldi	r24, 0x06	; 6
  92:	84 b9       	out	0x04, r24	; 4
	DDRC = 0;				// PORTC as input
  94:	17 b8       	out	0x07, r1	; 7
	DDRD |= 0xFF; //PD2 Input
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	8a b9       	out	0x0a, r24	; 10
	//PORTD |= (1 << 2);
	
	// timer 1 initialization - generate 50Hz PWM
	TCCR1A |= (1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);	// enable PWM for OC1A & OC1B
  9c:	e0 e8       	ldi	r30, 0x80	; 128
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	82 6a       	ori	r24, 0xA2	; 162
  a4:	80 83       	st	Z, r24
	// Fast PWM, Non-inverted mode
	TCCR1B |= (1<<WGM13)|(1<<WGM12)|(1<<CS10);		// 8 prescaling
  a6:	e1 e8       	ldi	r30, 0x81	; 129
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	89 61       	ori	r24, 0x19	; 25
  ae:	80 83       	st	Z, r24
	ICR1 = 65535;									// top value for timer1
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	9f ef       	ldi	r25, 0xFF	; 255
  b4:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  b8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	
	OCR0A = 122;	 //OCR0A is set compare register to 128
  bc:	8a e7       	ldi	r24, 0x7A	; 122
  be:	87 bd       	out	0x27, r24	; 39
	TCCR0B=(1 << CS02) | (1 << CS00);	//TCCR0B sets prescaler to None
  c0:	85 e0       	ldi	r24, 0x05	; 5
  c2:	85 bd       	out	0x25, r24	; 37
	TCCR0A=0x83; //TCCR0A sets WGM00 and WGM01 to 1 which sets Fast PWM as well as COM0A1 and COM0B1 to 1 which clears OCR0A when compare match.
  c4:	83 e8       	ldi	r24, 0x83	; 131
  c6:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= (1 << TOIE0);
  c8:	ee e6       	ldi	r30, 0x6E	; 110
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	81 60       	ori	r24, 0x01	; 1
  d0:	80 83       	st	Z, r24
	
	// initialize ADC
	DDRC = 0;			// Set PORTC as input for adc
  d2:	17 b8       	out	0x07, r1	; 7
	DIDR0 = 0x1;		// Disable digital input on ADC0 pin
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	ADMUX = 0;			// ADC0 (PC.0) used as analog input
  da:	ec e7       	ldi	r30, 0x7C	; 124
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0);	// use AVcc as the reference
  e0:	80 81       	ld	r24, Z
  e2:	80 64       	ori	r24, 0x40	; 64
  e4:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR);	// Right adjust for 8 bit resolution
  e6:	80 81       	ld	r24, Z
  e8:	80 62       	ori	r24, 0x20	; 32
  ea:	80 83       	st	Z, r24
	

	ADCSRA = 0x87;		// Enable ADC, system clock, 10000111
  ec:	87 e8       	ldi	r24, 0x87	; 135
  ee:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0x0;		// Free running mode
  f2:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	EIMSK = 1<<INT0;					// Enable INT0
  f6:	9d bb       	out	0x1d, r25	; 29
	EICRA = 1<<ISC01 | 1<<ISC00;	// Trigger INT0 on rising edge
  f8:	83 e0       	ldi	r24, 0x03	; 3
  fa:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	
	sei();
  fe:	78 94       	sei
	
	
	while (1){
		ADCSRA |= (1 << ADSC);			// start conversion
 100:	ea e7       	ldi	r30, 0x7A	; 122
 102:	f0 e0       	ldi	r31, 0x00	; 0
		while((ADCSRA&(1<<ADIF))==0);	// wait for conversion to finish
		adcVal = ADCH;			// extract right 8-bits of ADC register
 104:	a9 e7       	ldi	r26, 0x79	; 121
 106:	b0 e0       	ldi	r27, 0x00	; 0
		
		if(pressed) {
			OCR1A = 257*adcVal;	// OCR1A value for duty cycle
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	31 e0       	ldi	r19, 0x01	; 1
 10c:	c8 e8       	ldi	r28, 0x88	; 136
 10e:	d0 e0       	ldi	r29, 0x00	; 0
	
	sei();
	
	
	while (1){
		ADCSRA |= (1 << ADSC);			// start conversion
 110:	80 81       	ld	r24, Z
 112:	80 64       	ori	r24, 0x40	; 64
 114:	80 83       	st	Z, r24
		while((ADCSRA&(1<<ADIF))==0);	// wait for conversion to finish
 116:	80 81       	ld	r24, Z
 118:	84 ff       	sbrs	r24, 4
 11a:	fd cf       	rjmp	.-6      	; 0x116 <main+0x86>
		adcVal = ADCH;			// extract right 8-bits of ADC register
 11c:	8c 91       	ld	r24, X
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 124:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		
		if(pressed) {
 128:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <pressed>
 12c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <pressed+0x1>
 130:	89 2b       	or	r24, r25
 132:	69 f0       	breq	.+26     	; 0x14e <main+0xbe>
			OCR1A = 257*adcVal;	// OCR1A value for duty cycle
 134:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <_edata>
 138:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <_edata+0x1>
 13c:	42 9f       	mul	r20, r18
 13e:	c0 01       	movw	r24, r0
 140:	43 9f       	mul	r20, r19
 142:	90 0d       	add	r25, r0
 144:	52 9f       	mul	r21, r18
 146:	90 0d       	add	r25, r0
 148:	11 24       	eor	r1, r1
 14a:	99 83       	std	Y+1, r25	; 0x01
 14c:	88 83       	st	Y, r24
		}
		if(!pressed) {
 14e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <pressed>
 152:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <pressed+0x1>
 156:	89 2b       	or	r24, r25
 158:	d9 f6       	brne	.-74     	; 0x110 <main+0x80>
			OCR1A = 0;	// OCR1A value for duty cycle
 15a:	19 82       	std	Y+1, r1	; 0x01
 15c:	18 82       	st	Y, r1
 15e:	d8 cf       	rjmp	.-80     	; 0x110 <main+0x80>

00000160 <__vector_16>:
	}
	return 0;
}


ISR(TIMER0_OVF_vect) {
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	2f 93       	push	r18
 16c:	3f 93       	push	r19
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25

	if((PIND & (1<< PIND0))!=0){
 172:	48 9b       	sbis	0x09, 0	; 9
 174:	0e c0       	rjmp	.+28     	; 0x192 <__vector_16+0x32>
		pressed = !pressed;
 176:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <pressed>
 17a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <pressed+0x1>
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	23 2b       	or	r18, r19
 184:	11 f0       	breq	.+4      	; 0x18a <__vector_16+0x2a>
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <pressed+0x1>
 18e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <pressed>

	}

}
 192:	9f 91       	pop	r25
 194:	8f 91       	pop	r24
 196:	3f 91       	pop	r19
 198:	2f 91       	pop	r18
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <_exit>:
 1a4:	f8 94       	cli

000001a6 <__stop_program>:
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <__stop_program>
