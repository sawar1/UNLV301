
GccDA4BT1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000164  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000001d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000767  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000069f  00000000  00000000  000009d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000030f  00000000  00000000  00001076  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001388  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039f  00000000  00000000  000013dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cd  00000000  00000000  0000177b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001848  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 b0 00 	jmp	0x160	; 0x160 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
volatile int ovrflw;	// global variable for keeping track of # of times Timer0 overflows
volatile uint8_t ADCvalue; // Global variable, set to volatile if used with ISR

int main(void)
{
	DDRB = 0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	84 b9       	out	0x04, r24	; 4
	
	// initialize ADC
	DDRC = 0;			// Set PORTC as input for adc
  94:	17 b8       	out	0x07, r1	; 7
	DIDR0 = 0x1;		// Disable digital input on ADC0 pin
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	ADMUX = 0;			// ADC0 (PC.0) used as analog input
  9c:	ec e7       	ldi	r30, 0x7C	; 124
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0);	// use AVcc as the reference
  a2:	80 81       	ld	r24, Z
  a4:	80 64       	ori	r24, 0x40	; 64
  a6:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR);	// Right adjust for 8 bit resolution
  a8:	80 81       	ld	r24, Z
  aa:	80 62       	ori	r24, 0x20	; 32
  ac:	80 83       	st	Z, r24
	

	ADCSRA = 0x87;		// Enable ADC, system clock, 10000111
  ae:	87 e8       	ldi	r24, 0x87	; 135
  b0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0x0;		// Free running mode
  b4:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	// set up timer with prescaler = 64 and CTC mode
	TCCR1B |= (1 << WGM12)|(1 << CS11)|(1 << CS10);
  b8:	e1 e8       	ldi	r30, 0x81	; 129
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	8b 60       	ori	r24, 0x0B	; 11
  c0:	80 83       	st	Z, r24
	
	// initialize counter
	TCNT1 = 0;
  c2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  c6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	// initialize compare value
	OCR1A = 0;
  ca:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  ce:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	// enable compare interrupt
	TIMSK1 |= (1 << OCIE1A);
  d2:	ef e6       	ldi	r30, 0x6F	; 111
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	80 83       	st	Z, r24
	
	
	
	while(1)
	{
		ADCSRA |= (1 << ADSC);			// Start conversion
  dc:	ea e7       	ldi	r30, 0x7A	; 122
  de:	f0 e0       	ldi	r31, 0x00	; 0
		while((ADCSRA&(1<<ADIF))==0);	// Wait for conversion to finish

		if(ADCH < 245){
  e0:	a9 e7       	ldi	r26, 0x79	; 121
  e2:	b0 e0       	ldi	r27, 0x00	; 0
			ADCvalue = ADCH + 10;			// Only need to read the high value for 8 bit then equation for Fahrenheit
			PORTB = 0x0C;
  e4:	4c e0       	ldi	r20, 0x0C	; 12
			sei();
			PORTB = 0x09;
  e6:	39 e0       	ldi	r19, 0x09	; 9
			sei();
			PORTB = 0x03;
  e8:	23 e0       	ldi	r18, 0x03	; 3
			sei();
			PORTB = 0x06;
  ea:	96 e0       	ldi	r25, 0x06	; 6
	
	
	
	while(1)
	{
		ADCSRA |= (1 << ADSC);			// Start conversion
  ec:	80 81       	ld	r24, Z
  ee:	80 64       	ori	r24, 0x40	; 64
  f0:	80 83       	st	Z, r24
		while((ADCSRA&(1<<ADIF))==0);	// Wait for conversion to finish
  f2:	80 81       	ld	r24, Z
  f4:	84 ff       	sbrs	r24, 4
  f6:	fd cf       	rjmp	.-6      	; 0xf2 <main+0x62>

		if(ADCH < 245){
  f8:	8c 91       	ld	r24, X
  fa:	85 3f       	cpi	r24, 0xF5	; 245
  fc:	b8 f7       	brcc	.-18     	; 0xec <main+0x5c>
			ADCvalue = ADCH + 10;			// Only need to read the high value for 8 bit then equation for Fahrenheit
  fe:	8c 91       	ld	r24, X
 100:	86 5f       	subi	r24, 0xF6	; 246
 102:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ADCvalue>
			PORTB = 0x0C;
 106:	45 b9       	out	0x05, r20	; 5
			sei();
 108:	78 94       	sei
			PORTB = 0x09;
 10a:	35 b9       	out	0x05, r19	; 5
			sei();
 10c:	78 94       	sei
			PORTB = 0x03;
 10e:	25 b9       	out	0x05, r18	; 5
			sei();
 110:	78 94       	sei
			PORTB = 0x06;
 112:	95 b9       	out	0x05, r25	; 5
			sei();
 114:	78 94       	sei
 116:	ea cf       	rjmp	.-44     	; 0xec <main+0x5c>

00000118 <__vector_11>:

		}
	}
}

ISR (TIMER1_COMPA_vect) {
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	2f 93       	push	r18
 124:	3f 93       	push	r19
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
	
	for(int i=0;i<=ADCvalue;i++)
 12a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ADCvalue>
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 132:	8f ec       	ldi	r24, 0xCF	; 207
 134:	97 e0       	ldi	r25, 0x07	; 7
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <__vector_11+0x1e>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <__vector_11+0x24>
 13c:	00 00       	nop
 13e:	2f 5f       	subi	r18, 0xFF	; 255
 140:	3f 4f       	sbci	r19, 0xFF	; 255
 142:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ADCvalue>
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	82 17       	cp	r24, r18
 14a:	93 07       	cpc	r25, r19
 14c:	94 f7       	brge	.-28     	; 0x132 <__vector_11+0x1a>
	{
		_delay_ms(1);
	}
	
}
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	3f 91       	pop	r19
 154:	2f 91       	pop	r18
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <_exit>:
 160:	f8 94       	cli

00000162 <__stop_program>:
 162:	ff cf       	rjmp	.-2      	; 0x162 <__stop_program>
