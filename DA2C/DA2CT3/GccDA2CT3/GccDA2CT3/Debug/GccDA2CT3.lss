
GccDA2CT3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000192  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006e0  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000065c  00000000  00000000  00000914  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000026e  00000000  00000000  00000f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  000011e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000359  00000000  00000000  00001244  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  0000159d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001668  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 84 00 	call	0x108	; 0x108 <main>
  88:	0c 94 8d 00 	jmp	0x11a	; 0x11a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_14>:
#include <util/delay.h>
#include <avr/interrupt.h>

volatile uint8_t tof_detected;

ISR( TIMER0_COMPA_vect ){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
	TCNT0 = 0;
  a2:	16 bc       	out	0x26, r1	; 38
  a4:	2b e1       	ldi	r18, 0x1B	; 27
  a6:	30 e0       	ldi	r19, 0x00	; 0
	int TACO = 0;
	while(TACO != 27){
		while(TCNT0 != 255);
  a8:	86 b5       	in	r24, 0x26	; 38
  aa:	8f 3f       	cpi	r24, 0xFF	; 255
  ac:	e9 f7       	brne	.-6      	; 0xa8 <__vector_14+0x18>
		TCNT0 = 0;
  ae:	16 bc       	out	0x26, r1	; 38
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	31 09       	sbc	r19, r1
volatile uint8_t tof_detected;

ISR( TIMER0_COMPA_vect ){
	TCNT0 = 0;
	int TACO = 0;
	while(TACO != 27){
  b4:	c9 f7       	brne	.-14     	; 0xa8 <__vector_14+0x18>
		while(TCNT0 != 255);
		TCNT0 = 0;
		TACO++;
	}
	PORTB ^= (1<<2);
  b6:	95 b1       	in	r25, 0x05	; 5
  b8:	84 e0       	ldi	r24, 0x04	; 4
  ba:	89 27       	eor	r24, r25
  bc:	85 b9       	out	0x05, r24	; 5
	TACO = 0;
	TCNT0 = 0;
  be:	16 bc       	out	0x26, r1	; 38
  c0:	22 e1       	ldi	r18, 0x12	; 18
  c2:	30 e0       	ldi	r19, 0x00	; 0
	while(TACO != 18){
		while(TCNT0 != 255);
  c4:	86 b5       	in	r24, 0x26	; 38
  c6:	8f 3f       	cpi	r24, 0xFF	; 255
  c8:	e9 f7       	brne	.-6      	; 0xc4 <__vector_14+0x34>
		TCNT0 = 0;
  ca:	16 bc       	out	0x26, r1	; 38
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	31 09       	sbc	r19, r1
		TACO++;
	}
	PORTB ^= (1<<2);
	TACO = 0;
	TCNT0 = 0;
	while(TACO != 18){
  d0:	c9 f7       	brne	.-14     	; 0xc4 <__vector_14+0x34>
		while(TCNT0 != 255);
		TCNT0 = 0;
		TACO++;
	}
	PORTB ^= (1<<2);
  d2:	95 b1       	in	r25, 0x05	; 5
  d4:	84 e0       	ldi	r24, 0x04	; 4
  d6:	89 27       	eor	r24, r25
  d8:	85 b9       	out	0x05, r24	; 5
	TACO = 0;
	TCNT0 = 0;
  da:	16 bc       	out	0x26, r1	; 38
}
  dc:	9f 91       	pop	r25
  de:	8f 91       	pop	r24
  e0:	3f 91       	pop	r19
  e2:	2f 91       	pop	r18
  e4:	0f 90       	pop	r0
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	0f 90       	pop	r0
  ea:	1f 90       	pop	r1
  ec:	18 95       	reti

000000ee <timer0_init>:
void timer0_init(){
	// set up timer with prescaler = 1024
	TCCR0B |= (1 << CS02)|(1 << CS00);
  ee:	85 b5       	in	r24, 0x25	; 37
  f0:	85 60       	ori	r24, 0x05	; 5
  f2:	85 bd       	out	0x25, r24	; 37
	
	// initialize counter
	TCNT0 = 0;
  f4:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1 << OCIE0A);
  f6:	ee e6       	ldi	r30, 0x6E	; 110
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	82 60       	ori	r24, 0x02	; 2
  fe:	80 83       	st	Z, r24
	sei();
 100:	78 94       	sei
	tof_detected = 0;
 102:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 106:	08 95       	ret

00000108 <main>:
}

int main(void){
	DDRB |= (1 << 2);
 108:	22 9a       	sbi	0x04, 2	; 4
	DDRB |= (1 << 5);
 10a:	25 9a       	sbi	0x04, 5	; 4
	PORTB ^= (1 << 5);    // toggles the led off
 10c:	95 b1       	in	r25, 0x05	; 5
 10e:	80 e2       	ldi	r24, 0x20	; 32
 110:	89 27       	eor	r24, r25
 112:	85 b9       	out	0x05, r24	; 5
	timer0_init();
 114:	0e 94 77 00 	call	0xee	; 0xee <timer0_init>
 118:	ff cf       	rjmp	.-2      	; 0x118 <main+0x10>

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
