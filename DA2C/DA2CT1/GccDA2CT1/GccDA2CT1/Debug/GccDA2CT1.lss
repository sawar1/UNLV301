
GccDA2CT1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000696  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000610  00000000  00000000  00000842  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000230  00000000  00000000  00000e52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001084  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000334  00000000  00000000  000010a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000068  00000000  00000000  000013dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001444  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
// THIS IS TASK1 PART1
#include <util/delay.h>
#include <avr/interrupt.h>

int main(void){
	DDRB = 36;
  80:	84 e2       	ldi	r24, 0x24	; 36
  82:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<5);
  84:	2d 9a       	sbi	0x05, 5	; 5
	TCCR0B = 5;
  86:	85 e0       	ldi	r24, 0x05	; 5
  88:	85 bd       	out	0x25, r24	; 37
		while(TACO != 27){
			while(TCNT0 != 255);
			TCNT0 = 0;
			TACO++;
		}
		PORTB ^= (1<<2);
  8a:	94 e0       	ldi	r25, 0x04	; 4
int main(void){
	DDRB = 36;
	PORTB |= (1<<5);
	TCCR0B = 5;
	while(1){
		TCNT0 = 0;
  8c:	16 bc       	out	0x26, r1	; 38
  8e:	2b e1       	ldi	r18, 0x1B	; 27
  90:	30 e0       	ldi	r19, 0x00	; 0
		int TACO = 0;
		while(TACO != 27){
			while(TCNT0 != 255);
  92:	86 b5       	in	r24, 0x26	; 38
  94:	8f 3f       	cpi	r24, 0xFF	; 255
  96:	e9 f7       	brne	.-6      	; 0x92 <main+0x12>
			TCNT0 = 0;
  98:	16 bc       	out	0x26, r1	; 38
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	31 09       	sbc	r19, r1
	PORTB |= (1<<5);
	TCCR0B = 5;
	while(1){
		TCNT0 = 0;
		int TACO = 0;
		while(TACO != 27){
  9e:	c9 f7       	brne	.-14     	; 0x92 <main+0x12>
			while(TCNT0 != 255);
			TCNT0 = 0;
			TACO++;
		}
		PORTB ^= (1<<2);
  a0:	85 b1       	in	r24, 0x05	; 5
  a2:	89 27       	eor	r24, r25
  a4:	85 b9       	out	0x05, r24	; 5
		TACO = 0;
		TCNT0 = 0;
  a6:	16 bc       	out	0x26, r1	; 38
  a8:	22 e1       	ldi	r18, 0x12	; 18
  aa:	30 e0       	ldi	r19, 0x00	; 0
		while(TACO != 18){
			while(TCNT0 != 255);
  ac:	86 b5       	in	r24, 0x26	; 38
  ae:	8f 3f       	cpi	r24, 0xFF	; 255
  b0:	e9 f7       	brne	.-6      	; 0xac <main+0x2c>
			TCNT0 = 0;
  b2:	16 bc       	out	0x26, r1	; 38
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	31 09       	sbc	r19, r1
			TACO++;
		}
		PORTB ^= (1<<2);
		TACO = 0;
		TCNT0 = 0;
		while(TACO != 18){
  b8:	c9 f7       	brne	.-14     	; 0xac <main+0x2c>
			while(TCNT0 != 255);
			TCNT0 = 0;
			TACO++;
		}
		PORTB ^= (1<<2);
  ba:	85 b1       	in	r24, 0x05	; 5
  bc:	89 27       	eor	r24, r25
  be:	85 b9       	out	0x05, r24	; 5
		TACO = 0;
		TCNT0 = 0;
  c0:	16 bc       	out	0x26, r1	; 38
	}
  c2:	e4 cf       	rjmp	.-56     	; 0x8c <main+0xc>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
