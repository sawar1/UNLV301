
GccDA2CT2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000120  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000194  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000074a  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a7  00000000  00000000  00000986  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000026c  00000000  00000000  0000102d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  0000129c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000375  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000062  00000000  00000000  00001675  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000016d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  88:	0c 94 8e 00 	jmp	0x11c	; 0x11c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_16>:
// global variable to count the number of overflows
volatile uint8_t tof_detected;

// TIMER0 overflow interrupt service routine
// called whenever TCNT0 overflows
ISR(TIMER0_OVF_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
	// keep a track of number of overflows
	tof_detected++;
  9c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  a0:	8f 5f       	subi	r24, 0xFF	; 255
  a2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
  a6:	8f 91       	pop	r24
  a8:	0f 90       	pop	r0
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	0f 90       	pop	r0
  ae:	1f 90       	pop	r1
  b0:	18 95       	reti

000000b2 <timer0_init>:

void timer0_init(){
	// set up timer with prescaler = 1024
	TCCR0B |= (1 << CS02)|(1 << CS00);
  b2:	85 b5       	in	r24, 0x25	; 37
  b4:	85 60       	ori	r24, 0x05	; 5
  b6:	85 bd       	out	0x25, r24	; 37
	
	// initialize counter
	TCNT0 = 0;
  b8:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1 << TOIE0);
  ba:	ee e6       	ldi	r30, 0x6E	; 110
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	81 60       	ori	r24, 0x01	; 1
  c2:	80 83       	st	Z, r24
	sei();
  c4:	78 94       	sei
	tof_detected = 0;
  c6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  ca:	08 95       	ret

000000cc <of_funct>:
}
void of_funct(unsigned int of_detection_num, unsigned int tcount){
	// check if no. of overflows = of_detection_num
	if (tof_detected >= of_detection_num){
  cc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	28 17       	cp	r18, r24
  d4:	39 07       	cpc	r19, r25
  d6:	60 f0       	brcs	.+24     	; 0xf0 <of_funct+0x24>
		// NOTE: '>=' is used
		// check if the timer count reaches tcount
		
		if (TCNT0 >= tcount){
  d8:	86 b5       	in	r24, 0x26	; 38
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	86 17       	cp	r24, r22
  de:	97 07       	cpc	r25, r23
  e0:	38 f0       	brcs	.+14     	; 0xf0 <of_funct+0x24>
			PORTB ^= (1 << 2);    // toggles the led
  e2:	95 b1       	in	r25, 0x05	; 5
  e4:	84 e0       	ldi	r24, 0x04	; 4
  e6:	89 27       	eor	r24, r25
  e8:	85 b9       	out	0x05, r24	; 5
			TCNT0 = 0;            // reset counter
  ea:	16 bc       	out	0x26, r1	; 38
			tof_detected = 0;     // reset overflow  detection counter
  ec:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  f0:	08 95       	ret

000000f2 <main>:
		}
	}
}
int main(void){
	// connect led to pin PB2
	DDRB |= (1 << 2);
  f2:	22 9a       	sbi	0x04, 2	; 4
	DDRB |= (1 << 5);
  f4:	25 9a       	sbi	0x04, 5	; 4
	PORTB ^= (1 << 5);    // toggles the led off
  f6:	95 b1       	in	r25, 0x05	; 5
  f8:	80 e2       	ldi	r24, 0x20	; 32
  fa:	89 27       	eor	r24, r25
  fc:	85 b9       	out	0x05, r24	; 5
	
	// initialize timer
	timer0_init();
  fe:	0e 94 59 00 	call	0xb2	; 0xb2 <timer0_init>
	
	// loop forever
	while(1){
		of_funct(26, 165);
 102:	65 ea       	ldi	r22, 0xA5	; 165
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	8a e1       	ldi	r24, 0x1A	; 26
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 66 00 	call	0xcc	; 0xcc <of_funct>
		of_funct(17, 195);
 10e:	63 ec       	ldi	r22, 0xC3	; 195
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	81 e1       	ldi	r24, 0x11	; 17
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 66 00 	call	0xcc	; 0xcc <of_funct>
 11a:	f3 cf       	rjmp	.-26     	; 0x102 <main+0x10>

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
